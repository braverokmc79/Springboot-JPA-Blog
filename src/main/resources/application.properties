#Yaml to properties / Properties to Yaml converter
#http://mageddo.com/tools/yaml-converter



#-- 유저이름@아이피주소
#create user 'springbootblog'@'%' identified by '1234';
#-- ON DB이름.테이블명
#-- TO 유저이름@아이피주소
#GRANT ALL springbootblog ON *.* TO 'springbootblog'@'%';
#CREATE DATABASE springbootblog CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
#use blog;


#애플리케이션 포트 설정
server.port=80

#MySQL 연결설정
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/jpashop?serverTimezone=UTC
#spring.datasource.username=jpashop
#spring.datasource.password=12341234


spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:mysql://localhost:3306/springbootblog?serverTimezone=UTC
spring.datasource.username=springbootblog
spring.datasource.password=1234


####################################################################################
############################## auto build ############################################
####################################################################################
#Springboot auto build
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true

#Thymeleaf cache 사용 중지
spring.thymeleaf.cache =false


####################################################################################
####################################################################################
####################################################################################

####################################################################################
############################## jpa 옵션  ############################################
####################################################################################
#실행되는 쿼리 콘솔 출력
spring.jpa.properties.hibernate.show_sql=true

#콘솔창에 출력되는 쿼리를 가독성이 좋게 포맷팅
spring.jpa.properties.hibernate.format_sql=true

#쿼리에 물음표로 출력되는 바인드 파라미터 출력
logging.level.org.hibernate.type.descriptor.sql=trace

#추가적인 주석을 표시하기
spring.jpa.properties.hibernate.use_sql_comments=true


#none: 아무것도 실행하지 않는다 (대부분의 DB에서 기본값이다)
#create-drop: SessionFactory가 시작될 때 drop및 생성을 실행하고, SessionFactory가 종료될 때 drop을 실행한다 (in-memory DB의 경우 기본값이다)
#create: SessionFactory가 시작될 때 데이터베이스 drop을 실행하고 생성된 DDL을 실행한다
#update: 변경된 스키마를 적용한다
#validate: 변경된 스키마가 있다면 변경점을 출력하고 애플리케이션을 종료한다
spring.jpa.hibernate.ddl-auto=update

# MySQL 상세 지정
#SQL 은 표준 SQL과 DBMS 벤더에서 제공하는 SQL 이 존재합니다. 각 공급업체에서 만든 SQL 을 방언(Dialect)이라고
#생각하면 됩니다. 우리가 사용하는 데이터베이스는 MySQL 이어서 JPA 에 MySQL8Dialect 를 사용하라고 알려줍니다.
#만약, 데이터베이스를 오라클 교체하더라도, 오라클릐 Dialectf를 설정해준다면 문제없이 애플리케이션을 구동할 수 있습니다.
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
####################################################################################
####################################################################################
####################################################################################


####################################################################################
################ 페이징 처리 옵션 #####################################################
####################################################################################
# Default page size.
spring.data.web.pageable.default-page-size=20

# Maximum page size to be accepted.
spring.data.web.pageable.max-page-size=2000

# Whether to expose and assume 1-based page number indexes.
#spring.data.web.pageable.one-indexed-parameters=false
spring.data.web.pageable.one-indexed-parameters=true

# Page index parameter name.
spring.data.web.pageable.page-parameter=page

# General prefix to be prepended to the page number and page size parameters.
spring.data.web.pageable.prefix=

# Delimiter to be used between the qualifier and the actual page number and size properti
spring.data.web.pageable.qualifier-delimiter=_

# Page size parameter name.
spring.data.web.pageable.size-parameter=size

# Sort parameter name.
spring.data.web.sort.sort-parameter=sort

####################################################################################
####################################################################################
####################################################################################





####################################################################################
###########################파일 업로드 설정###############################
####################################################################################

#파일 한 개당 최대 사이즈
spring.servlet.multipart.maxFileSize=20MB

#요청당 최대 파일 크기
spring.servlet.multipart.maxRequestSize=100MB

#상품 이미지 업로드 경로
itemImgLocation=E:/IntelliJ IDEA/upload/item

#리소스 업로드 경로
uploadPath=file:///E:/IntelliJ IDEA/upload/

####################################################################################
####################################################################################
####################################################################################


#기본 batch size 설정
spring.jpa.properties.hibernate.default_batch_fetch_size=1000

#칙칙한 스프링 콘솔 창에 색을 입혀보자
spring.output.ansi.enabled=always

#IntelliJ IDEA 출력시 로그 링크를 클릭하면 소스로 이동하게 한다.
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %msg - at %C.%M\\(%F:%L\\)%n